--SQL Script to Seed Sample Data.
CREATE DATABASE ORG;
SHOW DATABASES;
USE ORG;

CREATE TABLE Worker (
	WORKER_ID INT NOT NULL PRIMARY KEY AUTO_INCREMENT,
	FIRST_NAME CHAR(25),
	LAST_NAME CHAR(25),
	SALARY INT(15),
	JOINING_DATE DATETIME,
	DEPARTMENT CHAR(25)
);

INSERT INTO Worker 
	(WORKER_ID, FIRST_NAME, LAST_NAME, SALARY, JOINING_DATE, DEPARTMENT) VALUES
		(001, 'Monika', 'Arora', 100000, '14-02-20 09.00.00', 'HR'),
		(002, 'Niharika', 'Verma', 80000, '14-06-11 09.00.00', 'Admin'),
		(003, 'Vishal', 'Singhal', 300000, '14-02-20 09.00.00', 'HR'),
		(004, 'Amitabh', 'Singh', 500000, '14-02-20 09.00.00', 'Admin'),
		(005, 'Vivek', 'Bhati', 500000, '14-06-11 09.00.00', 'Admin'),
		(006, 'Vipul', 'Diwan', 200000, '14-06-11 09.00.00', 'Account'),
		(007, 'Satish', 'Kumar', 75000, '14-01-20 09.00.00', 'Account'),
		(008, 'Geetika', 'Chauhan', 90000, '14-04-11 09.00.00', 'Admin');

CREATE TABLE Bonus (
	WORKER_REF_ID INT,
	BONUS_AMOUNT INT(10),
	BONUS_DATE DATETIME,
	FOREIGN KEY (WORKER_REF_ID)
		REFERENCES Worker(WORKER_ID)
        ON DELETE CASCADE
);

INSERT INTO Bonus 
	(WORKER_REF_ID, BONUS_AMOUNT, BONUS_DATE) VALUES
		(001, 5000, '16-02-20'),
		(002, 3000, '16-06-11'),
		(003, 4000, '16-02-20'),
		(001, 4500, '16-02-20'),
		(002, 3500, '16-06-11');COPY
CREATE TABLE Title (
	WORKER_REF_ID INT,
	WORKER_TITLE CHAR(25),
	AFFECTED_FROM DATETIME,
	FOREIGN KEY (WORKER_REF_ID)
		REFERENCES Worker(WORKER_ID)
        ON DELETE CASCADE
);

INSERT INTO Title 
	(WORKER_REF_ID, WORKER_TITLE, AFFECTED_FROM) VALUES
 (001, 'Manager', '2016-02-20 00:00:00'),
 (002, 'Executive', '2016-06-11 00:00:00'),
 (008, 'Executive', '2016-06-11 00:00:00'),
 (005, 'Manager', '2016-06-11 00:00:00'),
 (004, 'Asst. Manager', '2016-06-11 00:00:00'),
 (007, 'Executive', '2016-06-11 00:00:00'),
 (006, 'Lead', '2016-06-11 00:00:00'),
 (003, 'Lead', '2016-06-11 00:00:00');
--Q1. Write an SQL query to fetch “FIRST_NAME” from the Worker table using the alias name <WORKER_NAME>.

Select FIRST_NAME AS WORKER_NAME from Worker;
--Q2. Write an SQL query to fetch “FIRST_NAME” from the Worker table in upper case.
Select upper(FIRST_NAME) from Worker;
--Q3: Write an SQL query to fetch unique values of DEPARTMENT from Worker table.
SELECT DISTINCT department FROM Worker;

--Q4: Write an SQL query to find the position of the alphabet (‘a’) in the first name column ‘Amitabh’ from the Worker table.
SELECT INSTR(first_name, 'a') FROM Worker WHERE first_name = 'Amitabh';

--Q5: Write an SQL query to print the FIRST_NAME from the Worker table after removing white spaces from the right side.
SELECT RTRIM(first_name) AS trimmed_first_name FROM Worker;

--Q6: Write an SQL query to print the DEPARTMENT from the Worker table after removing white spaces from the left side.
SELECT LTRIM(department) AS trimmed_department FROM Worker;

--Q7: Write an SQL query to print the FIRST_NAME from the Worker table after replacing ‘a’ with ‘A’.
SELECT REPLACE(first_name, 'a', 'A') AS modified_first_name FROM Worker;

--Q8: Write an SQL query to print the FIRST_NAME and LAST_NAME from the Worker table into a single column COMPLETE_NAME. A space char should separate them.
SELECT CONCAT(first_name, ' ', last_name) AS complete_name FROM Worker;

--Q9: Write an SQL query to print all Worker details from the Worker table order by FIRST_NAME Ascending.
SELECT * FROM Worker ORDER BY first_name ASC;

--Q10: Write an SQL query to print all Worker details from the Worker table order by FIRST_NAME Ascending and DEPARTMENT Descending.
SELECT * FROM Worker ORDER BY first_name ASC, department DESC;

--Q11: Write an SQL query to print details of the Workers whose FIRST_NAME contains ‘a’.
SELECT * FROM Worker WHERE first_name LIKE '%a%';

--Q12: Write an SQL query to fetch worker names with salaries >= 50000 and <= 100000.
SELECT first_name FROM Worker WHERE salary >= 50000 AND salary <= 100000;

--Q13: Write an SQL query to fetch the first 50% records from a table.
SELECT * FROM Worker LIMIT (SELECT COUNT(*) / 2 FROM Worker);

--Q14: Write an SQL query to show the last record from a table.
SELECT * FROM Worker ORDER BY worker_id DESC LIMIT 1;

--Q15: Swapping the Values of first name and last name Columns in a worker table
UPDATE Worker
SET
    first_name = (SELECT @temp := first_name),
    first_name = last_name,
    last_name = @temp;



--Q12. Write an SQL query to print all Worker details from the Worker table order by FIRST_NAME Ascending and DEPARTMENT Descending.
Select * from Worker order by FIRST_NAME asc,DEPARTMENT desc;

--Q13. Write an SQL query to print details for Workers with the first names “Vipul” and “Satish” from the Worker table.

Select * from Worker where FIRST_NAME in ('Vipul','Satish');
--Q14. Write an SQL query to print details of workers excluding first names, “Vipul” and “Satish” from the Worker table.


Select * from Worker where FIRST_NAME not in ('Vipul','Satish');
--Q15. Write an SQL query to print details of Workers with DEPARTMENT name as “Admin”.


Select * from Worker where DEPARTMENT like 'Admin%';
--Q16. Write an SQL query to print details of the Workers whose FIRST_NAME contains ‘a’.



Select * from Worker where FIRST_NAME like '%a%';
--Q17. Write an SQL query to print details of the Workers whose FIRST_NAME ends with ‘a’.


Select * from Worker where FIRST_NAME like '%a';
--Q18. Write an SQL query to print details of the Workers whose FIRST_NAME ends with ‘h’ and contains six alphabets.


Select * from Worker where FIRST_NAME like '_____h';
--Q19. Write an SQL query to print details of the Workers whose SALARY lies between 100000 and 500000.



Select * from Worker where SALARY between 100000 and 500000;
--Q20. Write an SQL query to print details of the Workers who joined in Feb’2014.


Select * from Worker where year(JOINING_DATE) = 2014 and month(JOINING_DATE) = 2;

--Q21. Write an SQL query to fetch the count of employees working in the department ‘Admin’.


SELECT COUNT(*) FROM worker WHERE DEPARTMENT = 'Admin';



--Q22. Write an SQL query to fetch worker names with salaries >= 50000 and <= 100000.


SELECT CONCAT(FIRST_NAME, ' ', LAST_NAME) As Worker_Name, Salary
FROM worker 
WHERE WORKER_ID IN 
(SELECT WORKER_ID FROM worker 
WHERE Salary BETWEEN 50000 AND 100000);

--Q23. Write an SQL query to fetch the no. of workers for each department in descending order.



SELECT DEPARTMENT, count(WORKER_ID) No_Of_Workers 
FROM worker 
GROUP BY DEPARTMENT 
ORDER BY No_Of_Workers DESC;

--Q24. Write an SQL query to print details of the Workers who are also Managers.


SELECT DISTINCT W.FIRST_NAME, T.WORKER_TITLE
FROM Worker W
INNER JOIN Title T
ON W.WORKER_ID = T.WORKER_REF_ID
AND T.WORKER_TITLE in ('Manager');

--Q25. Write an SQL query to fetch duplicate records having matching data in some fields of a table.


SELECT WORKER_TITLE, AFFECTED_FROM, COUNT(*)
FROM Title
GROUP BY WORKER_TITLE, AFFECTED_FROM
HAVING COUNT(*) > 1;

--Q26. Write an SQL query to show only odd rows from a table.



SELECT * FROM Worker WHERE MOD (WORKER_ID, 2) <> 0;

--Q27. Write an SQL query to show only even rows from a table.


SELECT * FROM Worker WHERE MOD (WORKER_ID, 2) = 0;

--Q28. Write an SQL query to clone a new table from another table.


SELECT * INTO WorkerClone FROM Worker;

The general way to clone a table without information is:

SELECT * INTO WorkerClone FROM Worker WHERE 1 = 0;
COPY
An alternate way to clone a table (for MySQL) without data is:


CREATE TABLE WorkerClone LIKE Worker;

--Q29. Write an SQL query to fetch intersecting records of two tables.


(SELECT * FROM Worker)
INTERSECT
(SELECT * FROM WorkerClone);

--Q30. Write an SQL query to show records from one table that another table does not have.


SELECT * FROM Worker
MINUS
SELECT * FROM Title;

--Q31. Write an SQL query to show the current date and time.

SELECT CURDATE();

SELECT NOW();

--Q32. Write an SQL query to show the top n (say 10) records of a table.

SELECT * FROM Worker ORDER BY Salary DESC LIMIT 10;

--Q33. Write an SQL query to determine the nth (say n=5) highest salary from a table.


SELECT Salary FROM Worker ORDER BY Salary DESC LIMIT n-1,1;

--Q34. Write an SQL query to determine the 5th highest salary without using the TOP or limit method.


SELECT Salary
FROM Worker W1
WHERE 4 = (
 SELECT COUNT( DISTINCT ( W2.Salary ) )
 FROM Worker W2
 WHERE W2.Salary >= W1.Salary
 );

--Use the following generic method to find the nth highest salary without using TOP or limit.

SELECT Salary
FROM Worker W1
WHERE n-1 = (
 SELECT COUNT( DISTINCT ( W2.Salary ) )
 FROM Worker W2
 WHERE W2.Salary >= W1.Salary
 );

--Q35. Write an SQL query to fetch the list of employees with the same salary.


Select distinct W.WORKER_ID, W.FIRST_NAME, W.Salary 
from Worker W, Worker W1 
where W.Salary = W1.Salary 
and W.WORKER_ID != W1.WORKER_ID;

--Q36. Write an SQL query to show the second-highest salary from a table.


Select max(Salary) from Worker 
where Salary not in (Select max(Salary) from Worker);

--Q37. Write an SQL query to show one row twice in the results from a table.


select FIRST_NAME, DEPARTMENT from worker W where W.DEPARTMENT='HR' 
union all 
select FIRST_NAME, DEPARTMENT from Worker W1 where W1.DEPARTMENT='HR';

--Q38. Write an SQL query to fetch intersecting records of two tables.


(SELECT * FROM Worker)
INTERSECT
(SELECT * FROM WorkerClone);

--Q39. Write an SQL query to fetch the first 50% of records from a table.


SELECT *
FROM WORKER
WHERE WORKER_ID <= (SELECT count(WORKER_ID)/2 from Worker);


--Q40. Write an SQL query to fetch the departments that have less than five people in them.


SELECT DEPARTMENT, COUNT(WORKER_ID) as 'Number of Workers' FROM Worker GROUP BY DEPARTMENT HAVING COUNT(WORKER_ID) < 5;

--Q41. Write an SQL query to show all departments along with the number of people in there.


SELECT DEPARTMENT, COUNT(DEPARTMENT) as 'Number of Workers' FROM Worker GROUP BY DEPARTMENT;

--Q42. Write an SQL query to show the last record from a table.


Select * from Worker where WORKER_ID = (SELECT max(WORKER_ID) from Worker);

--Q43. Write an SQL query to fetch the first row of a table.


Select * from Worker where WORKER_ID = (SELECT min(WORKER_ID) from Worker);

--Q44. Write an SQL query to fetch the last five records from a table.


SELECT * FROM Worker WHERE WORKER_ID <=5
UNION
SELECT * FROM (SELECT * FROM Worker W order by W.WORKER_ID DESC) AS W1 WHERE W1.WORKER_ID <=5;

--Q45. Write an SQL query to print the name of employees having the highest salary in each department.


SELECT t.DEPARTMENT,t.FIRST_NAME,t.Salary from(SELECT max(Salary) as TotalSalary,DEPARTMENT from Worker group by DEPARTMENT) as TempNew 
Inner Join Worker t on TempNew.DEPARTMENT=t.DEPARTMENT 
 and TempNew.TotalSalary=t.Salary;

--Q46. Write an SQL query to fetch three max salaries from a table.


SELECT distinct Salary from worker a WHERE 3 >= (SELECT count(distinct Salary) from worker b WHERE a.Salary <= b.Salary) order by a.Salary desc;

--Q47. Write an SQL query to fetch three min salaries from a table.


SELECT distinct Salary from worker a WHERE 3 >= (SELECT count(distinct Salary) from worker b WHERE a.Salary >= b.Salary) order by a.Salary desc;

--Q48. Write an SQL query to fetch nth max salaries from a table.


SELECT distinct Salary from worker a WHERE n >= (SELECT count(distinct Salary) from worker b WHERE a.Salary <= b.Salary) order by a.Salary desc;

--Q49. Write an SQL query to fetch departments along with the total salaries paid for each of them.


 SELECT DEPARTMENT, sum(Salary) from worker group by DEPARTMENT;

--Q50. Write an SQL query to fetch the names of workers who earn the highest salary.


SELECT FIRST_NAME, SALARY from Worker WHERE SALARY=(SELECT max(SALARY) from Worker);